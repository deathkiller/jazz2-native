name: 'Universal Windows Platform'

on:
  push:
    branches:
      - 'master'
  pull_request:
    types: [ opened, synchronize ]
  workflow_dispatch:

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - BuildType: Release
          Backend: ANGLE
          Platform: x64
          ArchExts:
          
        - BuildType: Release
          Backend: ANGLE
          Platform: x64
          ArchExts: AVX
          
        - BuildType: Release
          Backend: ANGLE
          Platform: x64
          ArchExts: AVX2

        - BuildType: Release
          Backend: Mesa
          Platform: x64
          ArchExts: AVX2

    runs-on: 'windows-latest'

    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 'Setup MSBuild'
      uses: microsoft/setup-msbuild@v1.3.2
        
    - name: 'Configure CMake'
      run: |
        switch('${{ matrix.Backend }}') {
          'ANGLE' { $withAngle = 'ON' } 
          'Mesa' { $withAngle = 'OFF' } 
        }
        switch('${{ matrix.Platform }}') {
          'x86' { $arch = 'Win32' } 
          'x64' { $arch = 'x64' } 
        }

        rm -force ".\Content\Translations\*.po"
        
        $currentDirectory = Get-Location
        $certBytes = [System.Convert]::FromBase64String("${{ secrets.UWP_CERTIFICATE_FILE }}")
        $certPath = Join-Path -Path $currentDirectory -ChildPath "_cert.pfx"
        [IO.File]::WriteAllBytes("$certPath", $certBytes)
        
        cmake -B ".\_build\" -D CMAKE_BUILD_TYPE=${{ matrix.BuildType }} -D CMAKE_SYSTEM_NAME=WindowsStore -D CMAKE_SYSTEM_VERSION="10.0" -A $arch -D CMAKE_SYSTEM_PROCESSOR=$arch -D NCINE_ARCH_EXTENSIONS="${{ matrix.ArchExts }}" -D NCINE_STRIP_BINARIES=ON -D NCINE_UWP_CERTIFICATE_PATH="$certPath" -D NCINE_UWP_CERTIFICATE_PASSWORD="${{ secrets.UWP_CERTIFICATE_PASSWORD }}" -D NCINE_WITH_ANGLE="$withAngle" -D DEATH_TRACE=OFF

    - name: 'Build'
      run: |
        switch('${{ matrix.Platform }}') {
          'x86' { $arch = 'Win32' } 
          'x64' { $arch = 'x64' } 
        }
        
        cd .\_build\
        msbuild ".\Jazz2.sln" -p:Configuration=${{ matrix.BuildType }} -p:Platform=$arch -p:UapAppxPackageBuildMode="Sideload" -p:AppxBundlePlatforms="${{ matrix.Platform }}" -p:AppxPackageDir=".\_out\"

    - name: 'Create Package'
      run: |
        cd .\_build\_out\
        $cerPath = (Get-ChildItem -Path .\*\*.cer)[0]
        $msixbundlePath = (Get-ChildItem -Path .\*\*.msixbundle)[0]
        cd ..\..\
        mkdir _package
        Move-Item -Path "$cerPath" -Destination ".\_package\Jazz2.cer"
        Move-Item -Path "$msixbundlePath" -Destination ".\_package\Jazz2.msixbundle"
        Move-Item -Path ".\LICENSE" -Destination ".\_package\LICENSE"
        
        if ('${{ matrix.ArchExts }}') { $artifactPath = 'Jazz2_UWP_${{ matrix.Backend }}_${{ matrix.Platform }}_${{ matrix.ArchExts }}' } else { $artifactPath = 'Jazz2_UWP_${{ matrix.Backend }}_${{ matrix.Platform }}' }
        Add-Content -Path $env:GITHUB_ENV -Value "artifactPath=$artifactPath"
        
    - name: 'Upload Package'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifactPath }}
        path: ./_package/
